name: C/C++ CI

on: [push, pull_request]

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Format check
        run: .github/format-check.sh

  build:
    needs: [format-check]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        config: [Release]
        version: [zip, appimage]
        include:
          - os: windows-latest
            version: zip
            cache_path: |
                C:\vcpkg\installed
                C:\vcpkg\packages
                C:\Users\runneradmin\AppData\Local\ccache
            extra_cmake_args: -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake 
            cmake_preset: windows-ninja
        exclude:
          - os: windows-latest
            version: appimage

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'
 
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.cache_path }}
          key: cache-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
          restore-keys: |
            cache-${{ matrix.os }}-${{ matrix.config }}-

      - name: Set up build environment (windows-latest)
        run: |
          vcpkg install zlib:x64-windows boost-system:x64-windows boost-filesystem:x64-windows boost-program-options:x64-windows boost-icl:x64-windows boost-variant:x64-windows curl:x64-windows openssl:x64-windows
          choco install ccache
        if: matrix.os == 'windows-latest'

      - name: Ccache setup
        run: ccache -z

      - name: CMake
        run: |
          cmake ${{ matrix.extra_cmake_args }} --preset ${{ matrix.cmake_preset }}
          cmake --build build/${{ matrix.cmake_preset }} --config ${{ matrix.config }}

      - name: CTest
        working-directory: build/${{ matrix.cmake_preset }}
        run: ctest --build-config ${{ matrix.config }} --output-on-failure

      - name: Compute git short sha
        shell: bash
        run: echo "git_short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Ccache statistics
        run: ccache -s

      - uses: actions/upload-artifact@v3
        with:
          name: vita3k-${{ env.git_short_sha }}-${{ matrix.version }}-${{ matrix.os }}
          # path is set up to be <binary_dir>/bin/<config_type> since that's how multi-config
          # generators work on CMake
          path: build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}

    outputs:
      BuildTag: ${{ env.build_variable }}

  create-release:
    needs: [build]
    runs-on: "ubuntu-20.04"
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Get Build Variable
        run: echo "Build_Variable=${{ needs.build.outputs.BuildTag }}" >> $GITHUB_ENV

      - name: Upload
        shell: bash
        run: |
          mkdir artifacts/
          files=$(find . -name "*latest")
          for f in $files; do
            echo "Compressing $f"
            (cd $(basename $f) && zip -r ../artifacts/$(basename $f  | cut -d "-" -f 4)-latest.zip *)
          done
          ls -al artifacts/
          wget -c https://github.com/tcnksm/ghr/releases/download/v0.14.0/ghr_v0.14.0_linux_amd64.tar.gz
          tar xfv ghr_v0.14.0_linux_amd64.tar.gz
          ghr_v0.14.0_linux_amd64/ghr -u Vita3K -r Vita3K -recreate -n 'Automatic CI builds' -b "$(printf "Corresponding commit: ${{ github.sha }}\nVita3K Build: ${{ env.Build_Variable }}")" continuous artifacts/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

